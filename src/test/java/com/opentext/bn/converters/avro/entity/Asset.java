/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Asset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3167971319630375888L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Asset\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"assetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"assetName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"assetType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"assetDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"xifInfo\",\"type\":{\"type\":\"record\",\"name\":\"PayloadRef\",\"fields\":[{\"name\":\"payloadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payloadType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Asset> ENCODER =
      new BinaryMessageEncoder<Asset>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Asset> DECODER =
      new BinaryMessageDecoder<Asset>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Asset> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Asset> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Asset>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Asset to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Asset from a ByteBuffer. */
  public static Asset fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String assetId;
   private java.lang.String assetName;
   private java.lang.String assetType;
   private java.lang.String assetDescription;
   private com.opentext.bn.converters.avro.entity.PayloadRef xifInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Asset() {}

  /**
   * All-args constructor.
   * @param assetId The new value for assetId
   * @param assetName The new value for assetName
   * @param assetType The new value for assetType
   * @param assetDescription The new value for assetDescription
   * @param xifInfo The new value for xifInfo
   */
  public Asset(java.lang.String assetId, java.lang.String assetName, java.lang.String assetType, java.lang.String assetDescription, com.opentext.bn.converters.avro.entity.PayloadRef xifInfo) {
    this.assetId = assetId;
    this.assetName = assetName;
    this.assetType = assetType;
    this.assetDescription = assetDescription;
    this.xifInfo = xifInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return assetId;
    case 1: return assetName;
    case 2: return assetType;
    case 3: return assetDescription;
    case 4: return xifInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: assetId = (java.lang.String)value$; break;
    case 1: assetName = (java.lang.String)value$; break;
    case 2: assetType = (java.lang.String)value$; break;
    case 3: assetDescription = (java.lang.String)value$; break;
    case 4: xifInfo = (com.opentext.bn.converters.avro.entity.PayloadRef)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'assetId' field.
   * @return The value of the 'assetId' field.
   */
  public java.lang.String getAssetId() {
    return assetId;
  }


  /**
   * Gets the value of the 'assetName' field.
   * @return The value of the 'assetName' field.
   */
  public java.lang.String getAssetName() {
    return assetName;
  }


  /**
   * Gets the value of the 'assetType' field.
   * @return The value of the 'assetType' field.
   */
  public java.lang.String getAssetType() {
    return assetType;
  }


  /**
   * Gets the value of the 'assetDescription' field.
   * @return The value of the 'assetDescription' field.
   */
  public java.lang.String getAssetDescription() {
    return assetDescription;
  }


  /**
   * Gets the value of the 'xifInfo' field.
   * @return The value of the 'xifInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.PayloadRef getXifInfo() {
    return xifInfo;
  }


  /**
   * Creates a new Asset RecordBuilder.
   * @return A new Asset RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.Asset.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.Asset.Builder();
  }

  /**
   * Creates a new Asset RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Asset RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.Asset.Builder newBuilder(com.opentext.bn.converters.avro.entity.Asset.Builder other) {
    return new com.opentext.bn.converters.avro.entity.Asset.Builder(other);
  }

  /**
   * Creates a new Asset RecordBuilder by copying an existing Asset instance.
   * @param other The existing instance to copy.
   * @return A new Asset RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.Asset.Builder newBuilder(com.opentext.bn.converters.avro.entity.Asset other) {
    return new com.opentext.bn.converters.avro.entity.Asset.Builder(other);
  }

  /**
   * RecordBuilder for Asset instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Asset>
    implements org.apache.avro.data.RecordBuilder<Asset> {

    private java.lang.String assetId;
    private java.lang.String assetName;
    private java.lang.String assetType;
    private java.lang.String assetDescription;
    private com.opentext.bn.converters.avro.entity.PayloadRef xifInfo;
    private com.opentext.bn.converters.avro.entity.PayloadRef.Builder xifInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.Asset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assetName)) {
        this.assetName = data().deepCopy(fields()[1].schema(), other.assetName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.assetType)) {
        this.assetType = data().deepCopy(fields()[2].schema(), other.assetType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assetDescription)) {
        this.assetDescription = data().deepCopy(fields()[3].schema(), other.assetDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.xifInfo)) {
        this.xifInfo = data().deepCopy(fields()[4].schema(), other.xifInfo);
        fieldSetFlags()[4] = true;
      }
      if (other.hasXifInfoBuilder()) {
        this.xifInfoBuilder = com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(other.getXifInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Asset instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.Asset other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assetName)) {
        this.assetName = data().deepCopy(fields()[1].schema(), other.assetName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.assetType)) {
        this.assetType = data().deepCopy(fields()[2].schema(), other.assetType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assetDescription)) {
        this.assetDescription = data().deepCopy(fields()[3].schema(), other.assetDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.xifInfo)) {
        this.xifInfo = data().deepCopy(fields()[4].schema(), other.xifInfo);
        fieldSetFlags()[4] = true;
      }
      this.xifInfoBuilder = null;
    }

    /**
      * Gets the value of the 'assetId' field.
      * @return The value.
      */
    public java.lang.String getAssetId() {
      return assetId;
    }

    /**
      * Sets the value of the 'assetId' field.
      * @param value The value of 'assetId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setAssetId(java.lang.String value) {
      validate(fields()[0], value);
      this.assetId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'assetId' field has been set.
      * @return True if the 'assetId' field has been set, false otherwise.
      */
    public boolean hasAssetId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'assetId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder clearAssetId() {
      assetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetName' field.
      * @return The value.
      */
    public java.lang.String getAssetName() {
      return assetName;
    }

    /**
      * Sets the value of the 'assetName' field.
      * @param value The value of 'assetName'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setAssetName(java.lang.String value) {
      validate(fields()[1], value);
      this.assetName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'assetName' field has been set.
      * @return True if the 'assetName' field has been set, false otherwise.
      */
    public boolean hasAssetName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'assetName' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder clearAssetName() {
      assetName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetType' field.
      * @return The value.
      */
    public java.lang.String getAssetType() {
      return assetType;
    }

    /**
      * Sets the value of the 'assetType' field.
      * @param value The value of 'assetType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setAssetType(java.lang.String value) {
      validate(fields()[2], value);
      this.assetType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'assetType' field has been set.
      * @return True if the 'assetType' field has been set, false otherwise.
      */
    public boolean hasAssetType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'assetType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder clearAssetType() {
      assetType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetDescription' field.
      * @return The value.
      */
    public java.lang.String getAssetDescription() {
      return assetDescription;
    }

    /**
      * Sets the value of the 'assetDescription' field.
      * @param value The value of 'assetDescription'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setAssetDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.assetDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assetDescription' field has been set.
      * @return True if the 'assetDescription' field has been set, false otherwise.
      */
    public boolean hasAssetDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assetDescription' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder clearAssetDescription() {
      assetDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'xifInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef getXifInfo() {
      return xifInfo;
    }

    /**
      * Sets the value of the 'xifInfo' field.
      * @param value The value of 'xifInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setXifInfo(com.opentext.bn.converters.avro.entity.PayloadRef value) {
      validate(fields()[4], value);
      this.xifInfoBuilder = null;
      this.xifInfo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'xifInfo' field has been set.
      * @return True if the 'xifInfo' field has been set, false otherwise.
      */
    public boolean hasXifInfo() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'xifInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder getXifInfoBuilder() {
      if (xifInfoBuilder == null) {
        if (hasXifInfo()) {
          setXifInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(xifInfo));
        } else {
          setXifInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder());
        }
      }
      return xifInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'xifInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.Asset.Builder setXifInfoBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.Builder value) {
      clearXifInfo();
      xifInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'xifInfo' field has an active Builder instance
     * @return True if the 'xifInfo' field has an active Builder instance
     */
    public boolean hasXifInfoBuilder() {
      return xifInfoBuilder != null;
    }

    /**
      * Clears the value of the 'xifInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.Asset.Builder clearXifInfo() {
      xifInfo = null;
      xifInfoBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Asset build() {
      try {
        Asset record = new Asset();
        record.assetId = fieldSetFlags()[0] ? this.assetId : (java.lang.String) defaultValue(fields()[0]);
        record.assetName = fieldSetFlags()[1] ? this.assetName : (java.lang.String) defaultValue(fields()[1]);
        record.assetType = fieldSetFlags()[2] ? this.assetType : (java.lang.String) defaultValue(fields()[2]);
        record.assetDescription = fieldSetFlags()[3] ? this.assetDescription : (java.lang.String) defaultValue(fields()[3]);
        if (xifInfoBuilder != null) {
          record.xifInfo = this.xifInfoBuilder.build();
        } else {
          record.xifInfo = fieldSetFlags()[4] ? this.xifInfo : (com.opentext.bn.converters.avro.entity.PayloadRef) defaultValue(fields()[4]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Asset>
    WRITER$ = (org.apache.avro.io.DatumWriter<Asset>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Asset>
    READER$ = (org.apache.avro.io.DatumReader<Asset>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
