/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeliveryReadyForPickupEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2487362697482906252L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeliveryReadyForPickupEvent\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"transactionContext\",\"type\":{\"type\":\"record\",\"name\":\"TransactionContext\",\"fields\":[{\"name\":\"boundaryParentProcessId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"correlationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"documentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventTimestamp\",\"type\":\"long\"},{\"name\":\"flowId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"parentProcessId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ownershipIndicator\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"OwnershipIndicator\",\"symbols\":[\"SENDER\",\"RECEIVER\",\"BOTH\"]}],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"processingCell\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processingComputeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processingRegion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"receiverAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"relatedTransactions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RelatedTransaction\",\"fields\":[{\"name\":\"relationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null},{\"name\":\"senderAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"serviceInstanceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"solutionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taskId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testProdIndicator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionTags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}},{\"name\":\"mailbox\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"readyForPickupTimestamp\",\"type\":\"long\"},{\"name\":\"executionDetails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProcessingParam\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null},{\"name\":\"payloadRef\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PayloadRef\",\"fields\":[{\"name\":\"payloadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payloadType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeliveryReadyForPickupEvent> ENCODER =
      new BinaryMessageEncoder<DeliveryReadyForPickupEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeliveryReadyForPickupEvent> DECODER =
      new BinaryMessageDecoder<DeliveryReadyForPickupEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DeliveryReadyForPickupEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DeliveryReadyForPickupEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeliveryReadyForPickupEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DeliveryReadyForPickupEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DeliveryReadyForPickupEvent from a ByteBuffer. */
  public static DeliveryReadyForPickupEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.opentext.bn.converters.avro.entity.TransactionContext transactionContext;
   private java.lang.String mailbox;
   private long readyForPickupTimestamp;
   private java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> executionDetails;
   private com.opentext.bn.converters.avro.entity.PayloadRef payloadRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeliveryReadyForPickupEvent() {}

  /**
   * All-args constructor.
   * @param transactionContext The new value for transactionContext
   * @param mailbox The new value for mailbox
   * @param readyForPickupTimestamp The new value for readyForPickupTimestamp
   * @param executionDetails The new value for executionDetails
   * @param payloadRef The new value for payloadRef
   */
  public DeliveryReadyForPickupEvent(com.opentext.bn.converters.avro.entity.TransactionContext transactionContext, java.lang.String mailbox, java.lang.Long readyForPickupTimestamp, java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> executionDetails, com.opentext.bn.converters.avro.entity.PayloadRef payloadRef) {
    this.transactionContext = transactionContext;
    this.mailbox = mailbox;
    this.readyForPickupTimestamp = readyForPickupTimestamp;
    this.executionDetails = executionDetails;
    this.payloadRef = payloadRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionContext;
    case 1: return mailbox;
    case 2: return readyForPickupTimestamp;
    case 3: return executionDetails;
    case 4: return payloadRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionContext = (com.opentext.bn.converters.avro.entity.TransactionContext)value$; break;
    case 1: mailbox = (java.lang.String)value$; break;
    case 2: readyForPickupTimestamp = (java.lang.Long)value$; break;
    case 3: executionDetails = (java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam>)value$; break;
    case 4: payloadRef = (com.opentext.bn.converters.avro.entity.PayloadRef)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transactionContext' field.
   * @return The value of the 'transactionContext' field.
   */
  public com.opentext.bn.converters.avro.entity.TransactionContext getTransactionContext() {
    return transactionContext;
  }


  /**
   * Gets the value of the 'mailbox' field.
   * @return The value of the 'mailbox' field.
   */
  public java.lang.String getMailbox() {
    return mailbox;
  }


  /**
   * Gets the value of the 'readyForPickupTimestamp' field.
   * @return The value of the 'readyForPickupTimestamp' field.
   */
  public java.lang.Long getReadyForPickupTimestamp() {
    return readyForPickupTimestamp;
  }


  /**
   * Gets the value of the 'executionDetails' field.
   * @return The value of the 'executionDetails' field.
   */
  public java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> getExecutionDetails() {
    return executionDetails;
  }


  /**
   * Gets the value of the 'payloadRef' field.
   * @return The value of the 'payloadRef' field.
   */
  public com.opentext.bn.converters.avro.entity.PayloadRef getPayloadRef() {
    return payloadRef;
  }


  /**
   * Creates a new DeliveryReadyForPickupEvent RecordBuilder.
   * @return A new DeliveryReadyForPickupEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder();
  }

  /**
   * Creates a new DeliveryReadyForPickupEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeliveryReadyForPickupEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder other) {
    return new com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder(other);
  }

  /**
   * Creates a new DeliveryReadyForPickupEvent RecordBuilder by copying an existing DeliveryReadyForPickupEvent instance.
   * @param other The existing instance to copy.
   * @return A new DeliveryReadyForPickupEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent other) {
    return new com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder(other);
  }

  /**
   * RecordBuilder for DeliveryReadyForPickupEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeliveryReadyForPickupEvent>
    implements org.apache.avro.data.RecordBuilder<DeliveryReadyForPickupEvent> {

    private com.opentext.bn.converters.avro.entity.TransactionContext transactionContext;
    private com.opentext.bn.converters.avro.entity.TransactionContext.Builder transactionContextBuilder;
    private java.lang.String mailbox;
    private long readyForPickupTimestamp;
    private java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> executionDetails;
    private com.opentext.bn.converters.avro.entity.PayloadRef payloadRef;
    private com.opentext.bn.converters.avro.entity.PayloadRef.Builder payloadRefBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionContext)) {
        this.transactionContext = data().deepCopy(fields()[0].schema(), other.transactionContext);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTransactionContextBuilder()) {
        this.transactionContextBuilder = com.opentext.bn.converters.avro.entity.TransactionContext.newBuilder(other.getTransactionContextBuilder());
      }
      if (isValidValue(fields()[1], other.mailbox)) {
        this.mailbox = data().deepCopy(fields()[1].schema(), other.mailbox);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.readyForPickupTimestamp)) {
        this.readyForPickupTimestamp = data().deepCopy(fields()[2].schema(), other.readyForPickupTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.executionDetails)) {
        this.executionDetails = data().deepCopy(fields()[3].schema(), other.executionDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payloadRef)) {
        this.payloadRef = data().deepCopy(fields()[4].schema(), other.payloadRef);
        fieldSetFlags()[4] = true;
      }
      if (other.hasPayloadRefBuilder()) {
        this.payloadRefBuilder = com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(other.getPayloadRefBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DeliveryReadyForPickupEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionContext)) {
        this.transactionContext = data().deepCopy(fields()[0].schema(), other.transactionContext);
        fieldSetFlags()[0] = true;
      }
      this.transactionContextBuilder = null;
      if (isValidValue(fields()[1], other.mailbox)) {
        this.mailbox = data().deepCopy(fields()[1].schema(), other.mailbox);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.readyForPickupTimestamp)) {
        this.readyForPickupTimestamp = data().deepCopy(fields()[2].schema(), other.readyForPickupTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.executionDetails)) {
        this.executionDetails = data().deepCopy(fields()[3].schema(), other.executionDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payloadRef)) {
        this.payloadRef = data().deepCopy(fields()[4].schema(), other.payloadRef);
        fieldSetFlags()[4] = true;
      }
      this.payloadRefBuilder = null;
    }

    /**
      * Gets the value of the 'transactionContext' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext getTransactionContext() {
      return transactionContext;
    }

    /**
      * Sets the value of the 'transactionContext' field.
      * @param value The value of 'transactionContext'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setTransactionContext(com.opentext.bn.converters.avro.entity.TransactionContext value) {
      validate(fields()[0], value);
      this.transactionContextBuilder = null;
      this.transactionContext = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionContext' field has been set.
      * @return True if the 'transactionContext' field has been set, false otherwise.
      */
    public boolean hasTransactionContext() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'transactionContext' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder getTransactionContextBuilder() {
      if (transactionContextBuilder == null) {
        if (hasTransactionContext()) {
          setTransactionContextBuilder(com.opentext.bn.converters.avro.entity.TransactionContext.newBuilder(transactionContext));
        } else {
          setTransactionContextBuilder(com.opentext.bn.converters.avro.entity.TransactionContext.newBuilder());
        }
      }
      return transactionContextBuilder;
    }

    /**
     * Sets the Builder instance for the 'transactionContext' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setTransactionContextBuilder(com.opentext.bn.converters.avro.entity.TransactionContext.Builder value) {
      clearTransactionContext();
      transactionContextBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transactionContext' field has an active Builder instance
     * @return True if the 'transactionContext' field has an active Builder instance
     */
    public boolean hasTransactionContextBuilder() {
      return transactionContextBuilder != null;
    }

    /**
      * Clears the value of the 'transactionContext' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder clearTransactionContext() {
      transactionContext = null;
      transactionContextBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailbox' field.
      * @return The value.
      */
    public java.lang.String getMailbox() {
      return mailbox;
    }

    /**
      * Sets the value of the 'mailbox' field.
      * @param value The value of 'mailbox'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setMailbox(java.lang.String value) {
      validate(fields()[1], value);
      this.mailbox = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mailbox' field has been set.
      * @return True if the 'mailbox' field has been set, false otherwise.
      */
    public boolean hasMailbox() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mailbox' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder clearMailbox() {
      mailbox = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'readyForPickupTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getReadyForPickupTimestamp() {
      return readyForPickupTimestamp;
    }

    /**
      * Sets the value of the 'readyForPickupTimestamp' field.
      * @param value The value of 'readyForPickupTimestamp'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setReadyForPickupTimestamp(long value) {
      validate(fields()[2], value);
      this.readyForPickupTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'readyForPickupTimestamp' field has been set.
      * @return True if the 'readyForPickupTimestamp' field has been set, false otherwise.
      */
    public boolean hasReadyForPickupTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'readyForPickupTimestamp' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder clearReadyForPickupTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'executionDetails' field.
      * @return The value.
      */
    public java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> getExecutionDetails() {
      return executionDetails;
    }

    /**
      * Sets the value of the 'executionDetails' field.
      * @param value The value of 'executionDetails'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setExecutionDetails(java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam> value) {
      validate(fields()[3], value);
      this.executionDetails = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'executionDetails' field has been set.
      * @return True if the 'executionDetails' field has been set, false otherwise.
      */
    public boolean hasExecutionDetails() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'executionDetails' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder clearExecutionDetails() {
      executionDetails = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadRef' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef getPayloadRef() {
      return payloadRef;
    }

    /**
      * Sets the value of the 'payloadRef' field.
      * @param value The value of 'payloadRef'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setPayloadRef(com.opentext.bn.converters.avro.entity.PayloadRef value) {
      validate(fields()[4], value);
      this.payloadRefBuilder = null;
      this.payloadRef = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadRef' field has been set.
      * @return True if the 'payloadRef' field has been set, false otherwise.
      */
    public boolean hasPayloadRef() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'payloadRef' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder getPayloadRefBuilder() {
      if (payloadRefBuilder == null) {
        if (hasPayloadRef()) {
          setPayloadRefBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder(payloadRef));
        } else {
          setPayloadRefBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.newBuilder());
        }
      }
      return payloadRefBuilder;
    }

    /**
     * Sets the Builder instance for the 'payloadRef' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder setPayloadRefBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.Builder value) {
      clearPayloadRef();
      payloadRefBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payloadRef' field has an active Builder instance
     * @return True if the 'payloadRef' field has an active Builder instance
     */
    public boolean hasPayloadRefBuilder() {
      return payloadRefBuilder != null;
    }

    /**
      * Clears the value of the 'payloadRef' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.DeliveryReadyForPickupEvent.Builder clearPayloadRef() {
      payloadRef = null;
      payloadRefBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeliveryReadyForPickupEvent build() {
      try {
        DeliveryReadyForPickupEvent record = new DeliveryReadyForPickupEvent();
        if (transactionContextBuilder != null) {
          record.transactionContext = this.transactionContextBuilder.build();
        } else {
          record.transactionContext = fieldSetFlags()[0] ? this.transactionContext : (com.opentext.bn.converters.avro.entity.TransactionContext) defaultValue(fields()[0]);
        }
        record.mailbox = fieldSetFlags()[1] ? this.mailbox : (java.lang.String) defaultValue(fields()[1]);
        record.readyForPickupTimestamp = fieldSetFlags()[2] ? this.readyForPickupTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.executionDetails = fieldSetFlags()[3] ? this.executionDetails : (java.util.List<com.opentext.bn.converters.avro.entity.ProcessingParam>) defaultValue(fields()[3]);
        if (payloadRefBuilder != null) {
          record.payloadRef = this.payloadRefBuilder.build();
        } else {
          record.payloadRef = fieldSetFlags()[4] ? this.payloadRef : (com.opentext.bn.converters.avro.entity.PayloadRef) defaultValue(fields()[4]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeliveryReadyForPickupEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeliveryReadyForPickupEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeliveryReadyForPickupEvent>
    READER$ = (org.apache.avro.io.DatumReader<DeliveryReadyForPickupEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
