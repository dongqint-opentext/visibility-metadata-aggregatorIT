/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -946650928014263768L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionContext\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"boundaryParentProcessId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"correlationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"documentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventTimestamp\",\"type\":\"long\"},{\"name\":\"flowId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"parentProcessId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ownershipIndicator\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"OwnershipIndicator\",\"symbols\":[\"SENDER\",\"RECEIVER\",\"BOTH\"]}],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"processingCell\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processingComputeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processingRegion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"receiverAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"relatedTransactions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RelatedTransaction\",\"fields\":[{\"name\":\"relationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null},{\"name\":\"senderAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"serviceInstanceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"solutionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taskId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"testProdIndicator\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionTags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionContext> ENCODER =
      new BinaryMessageEncoder<TransactionContext>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionContext> DECODER =
      new BinaryMessageDecoder<TransactionContext>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransactionContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransactionContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionContext>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransactionContext to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransactionContext from a ByteBuffer. */
  public static TransactionContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String boundaryParentProcessId;
   private java.lang.String correlationId;
   private java.lang.String documentType;
   private java.lang.String eventId;
   private long eventTimestamp;
   private java.lang.String flowId;
   private java.lang.String parentProcessId;
   private com.opentext.bn.converters.avro.entity.OwnershipIndicator ownershipIndicator;
   private java.lang.String priority;
   private java.lang.String processId;
   private java.lang.String processingCell;
   private java.lang.String processingComputeZone;
   private java.lang.String processingRegion;
   private java.lang.String receiverAddress;
   private java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> relatedTransactions;
   private java.lang.String senderAddress;
   private java.lang.String serviceInstanceId;
   private java.lang.String serviceName;
   private java.lang.String solutionId;
   private java.lang.String taskId;
   private java.lang.String testProdIndicator;
   private java.lang.String transactionId;
   private java.util.List<java.lang.String> transactionTags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionContext() {}

  /**
   * All-args constructor.
   * @param boundaryParentProcessId The new value for boundaryParentProcessId
   * @param correlationId The new value for correlationId
   * @param documentType The new value for documentType
   * @param eventId The new value for eventId
   * @param eventTimestamp The new value for eventTimestamp
   * @param flowId The new value for flowId
   * @param parentProcessId The new value for parentProcessId
   * @param ownershipIndicator The new value for ownershipIndicator
   * @param priority The new value for priority
   * @param processId The new value for processId
   * @param processingCell The new value for processingCell
   * @param processingComputeZone The new value for processingComputeZone
   * @param processingRegion The new value for processingRegion
   * @param receiverAddress The new value for receiverAddress
   * @param relatedTransactions The new value for relatedTransactions
   * @param senderAddress The new value for senderAddress
   * @param serviceInstanceId The new value for serviceInstanceId
   * @param serviceName The new value for serviceName
   * @param solutionId The new value for solutionId
   * @param taskId The new value for taskId
   * @param testProdIndicator The new value for testProdIndicator
   * @param transactionId The new value for transactionId
   * @param transactionTags The new value for transactionTags
   */
  public TransactionContext(java.lang.String boundaryParentProcessId, java.lang.String correlationId, java.lang.String documentType, java.lang.String eventId, java.lang.Long eventTimestamp, java.lang.String flowId, java.lang.String parentProcessId, com.opentext.bn.converters.avro.entity.OwnershipIndicator ownershipIndicator, java.lang.String priority, java.lang.String processId, java.lang.String processingCell, java.lang.String processingComputeZone, java.lang.String processingRegion, java.lang.String receiverAddress, java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> relatedTransactions, java.lang.String senderAddress, java.lang.String serviceInstanceId, java.lang.String serviceName, java.lang.String solutionId, java.lang.String taskId, java.lang.String testProdIndicator, java.lang.String transactionId, java.util.List<java.lang.String> transactionTags) {
    this.boundaryParentProcessId = boundaryParentProcessId;
    this.correlationId = correlationId;
    this.documentType = documentType;
    this.eventId = eventId;
    this.eventTimestamp = eventTimestamp;
    this.flowId = flowId;
    this.parentProcessId = parentProcessId;
    this.ownershipIndicator = ownershipIndicator;
    this.priority = priority;
    this.processId = processId;
    this.processingCell = processingCell;
    this.processingComputeZone = processingComputeZone;
    this.processingRegion = processingRegion;
    this.receiverAddress = receiverAddress;
    this.relatedTransactions = relatedTransactions;
    this.senderAddress = senderAddress;
    this.serviceInstanceId = serviceInstanceId;
    this.serviceName = serviceName;
    this.solutionId = solutionId;
    this.taskId = taskId;
    this.testProdIndicator = testProdIndicator;
    this.transactionId = transactionId;
    this.transactionTags = transactionTags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return boundaryParentProcessId;
    case 1: return correlationId;
    case 2: return documentType;
    case 3: return eventId;
    case 4: return eventTimestamp;
    case 5: return flowId;
    case 6: return parentProcessId;
    case 7: return ownershipIndicator;
    case 8: return priority;
    case 9: return processId;
    case 10: return processingCell;
    case 11: return processingComputeZone;
    case 12: return processingRegion;
    case 13: return receiverAddress;
    case 14: return relatedTransactions;
    case 15: return senderAddress;
    case 16: return serviceInstanceId;
    case 17: return serviceName;
    case 18: return solutionId;
    case 19: return taskId;
    case 20: return testProdIndicator;
    case 21: return transactionId;
    case 22: return transactionTags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: boundaryParentProcessId = (java.lang.String)value$; break;
    case 1: correlationId = (java.lang.String)value$; break;
    case 2: documentType = (java.lang.String)value$; break;
    case 3: eventId = (java.lang.String)value$; break;
    case 4: eventTimestamp = (java.lang.Long)value$; break;
    case 5: flowId = (java.lang.String)value$; break;
    case 6: parentProcessId = (java.lang.String)value$; break;
    case 7: ownershipIndicator = (com.opentext.bn.converters.avro.entity.OwnershipIndicator)value$; break;
    case 8: priority = (java.lang.String)value$; break;
    case 9: processId = (java.lang.String)value$; break;
    case 10: processingCell = (java.lang.String)value$; break;
    case 11: processingComputeZone = (java.lang.String)value$; break;
    case 12: processingRegion = (java.lang.String)value$; break;
    case 13: receiverAddress = (java.lang.String)value$; break;
    case 14: relatedTransactions = (java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction>)value$; break;
    case 15: senderAddress = (java.lang.String)value$; break;
    case 16: serviceInstanceId = (java.lang.String)value$; break;
    case 17: serviceName = (java.lang.String)value$; break;
    case 18: solutionId = (java.lang.String)value$; break;
    case 19: taskId = (java.lang.String)value$; break;
    case 20: testProdIndicator = (java.lang.String)value$; break;
    case 21: transactionId = (java.lang.String)value$; break;
    case 22: transactionTags = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'boundaryParentProcessId' field.
   * @return The value of the 'boundaryParentProcessId' field.
   */
  public java.lang.String getBoundaryParentProcessId() {
    return boundaryParentProcessId;
  }


  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public java.lang.String getCorrelationId() {
    return correlationId;
  }


  /**
   * Gets the value of the 'documentType' field.
   * @return The value of the 'documentType' field.
   */
  public java.lang.String getDocumentType() {
    return documentType;
  }


  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public java.lang.Long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Gets the value of the 'flowId' field.
   * @return The value of the 'flowId' field.
   */
  public java.lang.String getFlowId() {
    return flowId;
  }


  /**
   * Gets the value of the 'parentProcessId' field.
   * @return The value of the 'parentProcessId' field.
   */
  public java.lang.String getParentProcessId() {
    return parentProcessId;
  }


  /**
   * Gets the value of the 'ownershipIndicator' field.
   * @return The value of the 'ownershipIndicator' field.
   */
  public com.opentext.bn.converters.avro.entity.OwnershipIndicator getOwnershipIndicator() {
    return ownershipIndicator;
  }


  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public java.lang.String getPriority() {
    return priority;
  }


  /**
   * Gets the value of the 'processId' field.
   * @return The value of the 'processId' field.
   */
  public java.lang.String getProcessId() {
    return processId;
  }


  /**
   * Gets the value of the 'processingCell' field.
   * @return The value of the 'processingCell' field.
   */
  public java.lang.String getProcessingCell() {
    return processingCell;
  }


  /**
   * Gets the value of the 'processingComputeZone' field.
   * @return The value of the 'processingComputeZone' field.
   */
  public java.lang.String getProcessingComputeZone() {
    return processingComputeZone;
  }


  /**
   * Gets the value of the 'processingRegion' field.
   * @return The value of the 'processingRegion' field.
   */
  public java.lang.String getProcessingRegion() {
    return processingRegion;
  }


  /**
   * Gets the value of the 'receiverAddress' field.
   * @return The value of the 'receiverAddress' field.
   */
  public java.lang.String getReceiverAddress() {
    return receiverAddress;
  }


  /**
   * Gets the value of the 'relatedTransactions' field.
   * @return The value of the 'relatedTransactions' field.
   */
  public java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> getRelatedTransactions() {
    return relatedTransactions;
  }


  /**
   * Gets the value of the 'senderAddress' field.
   * @return The value of the 'senderAddress' field.
   */
  public java.lang.String getSenderAddress() {
    return senderAddress;
  }


  /**
   * Gets the value of the 'serviceInstanceId' field.
   * @return The value of the 'serviceInstanceId' field.
   */
  public java.lang.String getServiceInstanceId() {
    return serviceInstanceId;
  }


  /**
   * Gets the value of the 'serviceName' field.
   * @return The value of the 'serviceName' field.
   */
  public java.lang.String getServiceName() {
    return serviceName;
  }


  /**
   * Gets the value of the 'solutionId' field.
   * @return The value of the 'solutionId' field.
   */
  public java.lang.String getSolutionId() {
    return solutionId;
  }


  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public java.lang.String getTaskId() {
    return taskId;
  }


  /**
   * Gets the value of the 'testProdIndicator' field.
   * @return The value of the 'testProdIndicator' field.
   */
  public java.lang.String getTestProdIndicator() {
    return testProdIndicator;
  }


  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Gets the value of the 'transactionTags' field.
   * @return The value of the 'transactionTags' field.
   */
  public java.util.List<java.lang.String> getTransactionTags() {
    return transactionTags;
  }


  /**
   * Creates a new TransactionContext RecordBuilder.
   * @return A new TransactionContext RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionContext.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.TransactionContext.Builder();
  }

  /**
   * Creates a new TransactionContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionContext RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionContext.Builder newBuilder(com.opentext.bn.converters.avro.entity.TransactionContext.Builder other) {
    return new com.opentext.bn.converters.avro.entity.TransactionContext.Builder(other);
  }

  /**
   * Creates a new TransactionContext RecordBuilder by copying an existing TransactionContext instance.
   * @param other The existing instance to copy.
   * @return A new TransactionContext RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.TransactionContext.Builder newBuilder(com.opentext.bn.converters.avro.entity.TransactionContext other) {
    return new com.opentext.bn.converters.avro.entity.TransactionContext.Builder(other);
  }

  /**
   * RecordBuilder for TransactionContext instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionContext>
    implements org.apache.avro.data.RecordBuilder<TransactionContext> {

    private java.lang.String boundaryParentProcessId;
    private java.lang.String correlationId;
    private java.lang.String documentType;
    private java.lang.String eventId;
    private long eventTimestamp;
    private java.lang.String flowId;
    private java.lang.String parentProcessId;
    private com.opentext.bn.converters.avro.entity.OwnershipIndicator ownershipIndicator;
    private java.lang.String priority;
    private java.lang.String processId;
    private java.lang.String processingCell;
    private java.lang.String processingComputeZone;
    private java.lang.String processingRegion;
    private java.lang.String receiverAddress;
    private java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> relatedTransactions;
    private java.lang.String senderAddress;
    private java.lang.String serviceInstanceId;
    private java.lang.String serviceName;
    private java.lang.String solutionId;
    private java.lang.String taskId;
    private java.lang.String testProdIndicator;
    private java.lang.String transactionId;
    private java.util.List<java.lang.String> transactionTags;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.TransactionContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.boundaryParentProcessId)) {
        this.boundaryParentProcessId = data().deepCopy(fields()[0].schema(), other.boundaryParentProcessId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.documentType)) {
        this.documentType = data().deepCopy(fields()[2].schema(), other.documentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventId)) {
        this.eventId = data().deepCopy(fields()[3].schema(), other.eventId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[4].schema(), other.eventTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.flowId)) {
        this.flowId = data().deepCopy(fields()[5].schema(), other.flowId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.parentProcessId)) {
        this.parentProcessId = data().deepCopy(fields()[6].schema(), other.parentProcessId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ownershipIndicator)) {
        this.ownershipIndicator = data().deepCopy(fields()[7].schema(), other.ownershipIndicator);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processId)) {
        this.processId = data().deepCopy(fields()[9].schema(), other.processId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.processingCell)) {
        this.processingCell = data().deepCopy(fields()[10].schema(), other.processingCell);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.processingComputeZone)) {
        this.processingComputeZone = data().deepCopy(fields()[11].schema(), other.processingComputeZone);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.processingRegion)) {
        this.processingRegion = data().deepCopy(fields()[12].schema(), other.processingRegion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.receiverAddress)) {
        this.receiverAddress = data().deepCopy(fields()[13].schema(), other.receiverAddress);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.relatedTransactions)) {
        this.relatedTransactions = data().deepCopy(fields()[14].schema(), other.relatedTransactions);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.senderAddress)) {
        this.senderAddress = data().deepCopy(fields()[15].schema(), other.senderAddress);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.serviceInstanceId)) {
        this.serviceInstanceId = data().deepCopy(fields()[16].schema(), other.serviceInstanceId);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[17].schema(), other.serviceName);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.solutionId)) {
        this.solutionId = data().deepCopy(fields()[18].schema(), other.solutionId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.taskId)) {
        this.taskId = data().deepCopy(fields()[19].schema(), other.taskId);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.testProdIndicator)) {
        this.testProdIndicator = data().deepCopy(fields()[20].schema(), other.testProdIndicator);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[21].schema(), other.transactionId);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.transactionTags)) {
        this.transactionTags = data().deepCopy(fields()[22].schema(), other.transactionTags);
        fieldSetFlags()[22] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionContext instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.TransactionContext other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.boundaryParentProcessId)) {
        this.boundaryParentProcessId = data().deepCopy(fields()[0].schema(), other.boundaryParentProcessId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.documentType)) {
        this.documentType = data().deepCopy(fields()[2].schema(), other.documentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventId)) {
        this.eventId = data().deepCopy(fields()[3].schema(), other.eventId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[4].schema(), other.eventTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.flowId)) {
        this.flowId = data().deepCopy(fields()[5].schema(), other.flowId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.parentProcessId)) {
        this.parentProcessId = data().deepCopy(fields()[6].schema(), other.parentProcessId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ownershipIndicator)) {
        this.ownershipIndicator = data().deepCopy(fields()[7].schema(), other.ownershipIndicator);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.priority)) {
        this.priority = data().deepCopy(fields()[8].schema(), other.priority);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processId)) {
        this.processId = data().deepCopy(fields()[9].schema(), other.processId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.processingCell)) {
        this.processingCell = data().deepCopy(fields()[10].schema(), other.processingCell);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.processingComputeZone)) {
        this.processingComputeZone = data().deepCopy(fields()[11].schema(), other.processingComputeZone);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.processingRegion)) {
        this.processingRegion = data().deepCopy(fields()[12].schema(), other.processingRegion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.receiverAddress)) {
        this.receiverAddress = data().deepCopy(fields()[13].schema(), other.receiverAddress);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.relatedTransactions)) {
        this.relatedTransactions = data().deepCopy(fields()[14].schema(), other.relatedTransactions);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.senderAddress)) {
        this.senderAddress = data().deepCopy(fields()[15].schema(), other.senderAddress);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.serviceInstanceId)) {
        this.serviceInstanceId = data().deepCopy(fields()[16].schema(), other.serviceInstanceId);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[17].schema(), other.serviceName);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.solutionId)) {
        this.solutionId = data().deepCopy(fields()[18].schema(), other.solutionId);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.taskId)) {
        this.taskId = data().deepCopy(fields()[19].schema(), other.taskId);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.testProdIndicator)) {
        this.testProdIndicator = data().deepCopy(fields()[20].schema(), other.testProdIndicator);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[21].schema(), other.transactionId);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.transactionTags)) {
        this.transactionTags = data().deepCopy(fields()[22].schema(), other.transactionTags);
        fieldSetFlags()[22] = true;
      }
    }

    /**
      * Gets the value of the 'boundaryParentProcessId' field.
      * @return The value.
      */
    public java.lang.String getBoundaryParentProcessId() {
      return boundaryParentProcessId;
    }

    /**
      * Sets the value of the 'boundaryParentProcessId' field.
      * @param value The value of 'boundaryParentProcessId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setBoundaryParentProcessId(java.lang.String value) {
      validate(fields()[0], value);
      this.boundaryParentProcessId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'boundaryParentProcessId' field has been set.
      * @return True if the 'boundaryParentProcessId' field has been set, false otherwise.
      */
    public boolean hasBoundaryParentProcessId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'boundaryParentProcessId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearBoundaryParentProcessId() {
      boundaryParentProcessId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public java.lang.String getCorrelationId() {
      return correlationId;
    }

    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setCorrelationId(java.lang.String value) {
      validate(fields()[1], value);
      this.correlationId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentType' field.
      * @return The value.
      */
    public java.lang.String getDocumentType() {
      return documentType;
    }

    /**
      * Sets the value of the 'documentType' field.
      * @param value The value of 'documentType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setDocumentType(java.lang.String value) {
      validate(fields()[2], value);
      this.documentType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'documentType' field has been set.
      * @return True if the 'documentType' field has been set, false otherwise.
      */
    public boolean hasDocumentType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'documentType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearDocumentType() {
      documentType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setEventId(java.lang.String value) {
      validate(fields()[3], value);
      this.eventId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEventTimestamp() {
      return eventTimestamp;
    }

    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setEventTimestamp(long value) {
      validate(fields()[4], value);
      this.eventTimestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearEventTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'flowId' field.
      * @return The value.
      */
    public java.lang.String getFlowId() {
      return flowId;
    }

    /**
      * Sets the value of the 'flowId' field.
      * @param value The value of 'flowId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setFlowId(java.lang.String value) {
      validate(fields()[5], value);
      this.flowId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'flowId' field has been set.
      * @return True if the 'flowId' field has been set, false otherwise.
      */
    public boolean hasFlowId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'flowId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearFlowId() {
      flowId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentProcessId' field.
      * @return The value.
      */
    public java.lang.String getParentProcessId() {
      return parentProcessId;
    }

    /**
      * Sets the value of the 'parentProcessId' field.
      * @param value The value of 'parentProcessId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setParentProcessId(java.lang.String value) {
      validate(fields()[6], value);
      this.parentProcessId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'parentProcessId' field has been set.
      * @return True if the 'parentProcessId' field has been set, false otherwise.
      */
    public boolean hasParentProcessId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'parentProcessId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearParentProcessId() {
      parentProcessId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownershipIndicator' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.OwnershipIndicator getOwnershipIndicator() {
      return ownershipIndicator;
    }

    /**
      * Sets the value of the 'ownershipIndicator' field.
      * @param value The value of 'ownershipIndicator'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setOwnershipIndicator(com.opentext.bn.converters.avro.entity.OwnershipIndicator value) {
      validate(fields()[7], value);
      this.ownershipIndicator = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'ownershipIndicator' field has been set.
      * @return True if the 'ownershipIndicator' field has been set, false otherwise.
      */
    public boolean hasOwnershipIndicator() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'ownershipIndicator' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearOwnershipIndicator() {
      ownershipIndicator = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public java.lang.String getPriority() {
      return priority;
    }

    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setPriority(java.lang.String value) {
      validate(fields()[8], value);
      this.priority = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'processId' field.
      * @return The value.
      */
    public java.lang.String getProcessId() {
      return processId;
    }

    /**
      * Sets the value of the 'processId' field.
      * @param value The value of 'processId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setProcessId(java.lang.String value) {
      validate(fields()[9], value);
      this.processId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'processId' field has been set.
      * @return True if the 'processId' field has been set, false otherwise.
      */
    public boolean hasProcessId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'processId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearProcessId() {
      processId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingCell' field.
      * @return The value.
      */
    public java.lang.String getProcessingCell() {
      return processingCell;
    }

    /**
      * Sets the value of the 'processingCell' field.
      * @param value The value of 'processingCell'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setProcessingCell(java.lang.String value) {
      validate(fields()[10], value);
      this.processingCell = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'processingCell' field has been set.
      * @return True if the 'processingCell' field has been set, false otherwise.
      */
    public boolean hasProcessingCell() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'processingCell' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearProcessingCell() {
      processingCell = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingComputeZone' field.
      * @return The value.
      */
    public java.lang.String getProcessingComputeZone() {
      return processingComputeZone;
    }

    /**
      * Sets the value of the 'processingComputeZone' field.
      * @param value The value of 'processingComputeZone'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setProcessingComputeZone(java.lang.String value) {
      validate(fields()[11], value);
      this.processingComputeZone = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'processingComputeZone' field has been set.
      * @return True if the 'processingComputeZone' field has been set, false otherwise.
      */
    public boolean hasProcessingComputeZone() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'processingComputeZone' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearProcessingComputeZone() {
      processingComputeZone = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingRegion' field.
      * @return The value.
      */
    public java.lang.String getProcessingRegion() {
      return processingRegion;
    }

    /**
      * Sets the value of the 'processingRegion' field.
      * @param value The value of 'processingRegion'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setProcessingRegion(java.lang.String value) {
      validate(fields()[12], value);
      this.processingRegion = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'processingRegion' field has been set.
      * @return True if the 'processingRegion' field has been set, false otherwise.
      */
    public boolean hasProcessingRegion() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'processingRegion' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearProcessingRegion() {
      processingRegion = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiverAddress' field.
      * @return The value.
      */
    public java.lang.String getReceiverAddress() {
      return receiverAddress;
    }

    /**
      * Sets the value of the 'receiverAddress' field.
      * @param value The value of 'receiverAddress'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setReceiverAddress(java.lang.String value) {
      validate(fields()[13], value);
      this.receiverAddress = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'receiverAddress' field has been set.
      * @return True if the 'receiverAddress' field has been set, false otherwise.
      */
    public boolean hasReceiverAddress() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'receiverAddress' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearReceiverAddress() {
      receiverAddress = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatedTransactions' field.
      * @return The value.
      */
    public java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> getRelatedTransactions() {
      return relatedTransactions;
    }

    /**
      * Sets the value of the 'relatedTransactions' field.
      * @param value The value of 'relatedTransactions'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setRelatedTransactions(java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction> value) {
      validate(fields()[14], value);
      this.relatedTransactions = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'relatedTransactions' field has been set.
      * @return True if the 'relatedTransactions' field has been set, false otherwise.
      */
    public boolean hasRelatedTransactions() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'relatedTransactions' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearRelatedTransactions() {
      relatedTransactions = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderAddress' field.
      * @return The value.
      */
    public java.lang.String getSenderAddress() {
      return senderAddress;
    }

    /**
      * Sets the value of the 'senderAddress' field.
      * @param value The value of 'senderAddress'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setSenderAddress(java.lang.String value) {
      validate(fields()[15], value);
      this.senderAddress = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'senderAddress' field has been set.
      * @return True if the 'senderAddress' field has been set, false otherwise.
      */
    public boolean hasSenderAddress() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'senderAddress' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearSenderAddress() {
      senderAddress = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceInstanceId' field.
      * @return The value.
      */
    public java.lang.String getServiceInstanceId() {
      return serviceInstanceId;
    }

    /**
      * Sets the value of the 'serviceInstanceId' field.
      * @param value The value of 'serviceInstanceId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setServiceInstanceId(java.lang.String value) {
      validate(fields()[16], value);
      this.serviceInstanceId = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceInstanceId' field has been set.
      * @return True if the 'serviceInstanceId' field has been set, false otherwise.
      */
    public boolean hasServiceInstanceId() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'serviceInstanceId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearServiceInstanceId() {
      serviceInstanceId = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * @return The value.
      */
    public java.lang.String getServiceName() {
      return serviceName;
    }

    /**
      * Sets the value of the 'serviceName' field.
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setServiceName(java.lang.String value) {
      validate(fields()[17], value);
      this.serviceName = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'solutionId' field.
      * @return The value.
      */
    public java.lang.String getSolutionId() {
      return solutionId;
    }

    /**
      * Sets the value of the 'solutionId' field.
      * @param value The value of 'solutionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setSolutionId(java.lang.String value) {
      validate(fields()[18], value);
      this.solutionId = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'solutionId' field has been set.
      * @return True if the 'solutionId' field has been set, false otherwise.
      */
    public boolean hasSolutionId() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'solutionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearSolutionId() {
      solutionId = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public java.lang.String getTaskId() {
      return taskId;
    }

    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setTaskId(java.lang.String value) {
      validate(fields()[19], value);
      this.taskId = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearTaskId() {
      taskId = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'testProdIndicator' field.
      * @return The value.
      */
    public java.lang.String getTestProdIndicator() {
      return testProdIndicator;
    }

    /**
      * Sets the value of the 'testProdIndicator' field.
      * @param value The value of 'testProdIndicator'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setTestProdIndicator(java.lang.String value) {
      validate(fields()[20], value);
      this.testProdIndicator = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'testProdIndicator' field has been set.
      * @return True if the 'testProdIndicator' field has been set, false otherwise.
      */
    public boolean hasTestProdIndicator() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'testProdIndicator' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearTestProdIndicator() {
      testProdIndicator = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setTransactionId(java.lang.String value) {
      validate(fields()[21], value);
      this.transactionId = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionTags' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getTransactionTags() {
      return transactionTags;
    }

    /**
      * Sets the value of the 'transactionTags' field.
      * @param value The value of 'transactionTags'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder setTransactionTags(java.util.List<java.lang.String> value) {
      validate(fields()[22], value);
      this.transactionTags = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionTags' field has been set.
      * @return True if the 'transactionTags' field has been set, false otherwise.
      */
    public boolean hasTransactionTags() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'transactionTags' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.TransactionContext.Builder clearTransactionTags() {
      transactionTags = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionContext build() {
      try {
        TransactionContext record = new TransactionContext();
        record.boundaryParentProcessId = fieldSetFlags()[0] ? this.boundaryParentProcessId : (java.lang.String) defaultValue(fields()[0]);
        record.correlationId = fieldSetFlags()[1] ? this.correlationId : (java.lang.String) defaultValue(fields()[1]);
        record.documentType = fieldSetFlags()[2] ? this.documentType : (java.lang.String) defaultValue(fields()[2]);
        record.eventId = fieldSetFlags()[3] ? this.eventId : (java.lang.String) defaultValue(fields()[3]);
        record.eventTimestamp = fieldSetFlags()[4] ? this.eventTimestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.flowId = fieldSetFlags()[5] ? this.flowId : (java.lang.String) defaultValue(fields()[5]);
        record.parentProcessId = fieldSetFlags()[6] ? this.parentProcessId : (java.lang.String) defaultValue(fields()[6]);
        record.ownershipIndicator = fieldSetFlags()[7] ? this.ownershipIndicator : (com.opentext.bn.converters.avro.entity.OwnershipIndicator) defaultValue(fields()[7]);
        record.priority = fieldSetFlags()[8] ? this.priority : (java.lang.String) defaultValue(fields()[8]);
        record.processId = fieldSetFlags()[9] ? this.processId : (java.lang.String) defaultValue(fields()[9]);
        record.processingCell = fieldSetFlags()[10] ? this.processingCell : (java.lang.String) defaultValue(fields()[10]);
        record.processingComputeZone = fieldSetFlags()[11] ? this.processingComputeZone : (java.lang.String) defaultValue(fields()[11]);
        record.processingRegion = fieldSetFlags()[12] ? this.processingRegion : (java.lang.String) defaultValue(fields()[12]);
        record.receiverAddress = fieldSetFlags()[13] ? this.receiverAddress : (java.lang.String) defaultValue(fields()[13]);
        record.relatedTransactions = fieldSetFlags()[14] ? this.relatedTransactions : (java.util.List<com.opentext.bn.converters.avro.entity.RelatedTransaction>) defaultValue(fields()[14]);
        record.senderAddress = fieldSetFlags()[15] ? this.senderAddress : (java.lang.String) defaultValue(fields()[15]);
        record.serviceInstanceId = fieldSetFlags()[16] ? this.serviceInstanceId : (java.lang.String) defaultValue(fields()[16]);
        record.serviceName = fieldSetFlags()[17] ? this.serviceName : (java.lang.String) defaultValue(fields()[17]);
        record.solutionId = fieldSetFlags()[18] ? this.solutionId : (java.lang.String) defaultValue(fields()[18]);
        record.taskId = fieldSetFlags()[19] ? this.taskId : (java.lang.String) defaultValue(fields()[19]);
        record.testProdIndicator = fieldSetFlags()[20] ? this.testProdIndicator : (java.lang.String) defaultValue(fields()[20]);
        record.transactionId = fieldSetFlags()[21] ? this.transactionId : (java.lang.String) defaultValue(fields()[21]);
        record.transactionTags = fieldSetFlags()[22] ? this.transactionTags : (java.util.List<java.lang.String>) defaultValue(fields()[22]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionContext>
    READER$ = (org.apache.avro.io.DatumReader<TransactionContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
