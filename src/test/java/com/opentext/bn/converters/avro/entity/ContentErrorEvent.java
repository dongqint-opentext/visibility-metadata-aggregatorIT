/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContentErrorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6220885261550643921L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContentErrorEvent\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"contentFileId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"documentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"envelopeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"errorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"errorInfo\",\"type\":{\"type\":\"record\",\"name\":\"ErrorInfo\",\"fields\":[{\"name\":\"errorCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"externalErrorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"internalErrorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isPayloadRelated\",\"type\":\"boolean\"}]}},{\"name\":\"errorLevel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"offset\",\"type\":\"int\"},{\"name\":\"position\",\"type\":\"int\"},{\"name\":\"processId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"taskId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContentErrorEvent> ENCODER =
      new BinaryMessageEncoder<ContentErrorEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContentErrorEvent> DECODER =
      new BinaryMessageDecoder<ContentErrorEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ContentErrorEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ContentErrorEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ContentErrorEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ContentErrorEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ContentErrorEvent from a ByteBuffer. */
  public static ContentErrorEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String contentFileId;
   private java.lang.String documentId;
   private java.lang.String envelopeId;
   private java.lang.String errorId;
   private com.opentext.bn.converters.avro.entity.ErrorInfo errorInfo;
   private java.lang.String errorLevel;
   private int offset;
   private int position;
   private java.lang.String processId;
   private java.lang.String taskId;
   private java.lang.String transactionId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContentErrorEvent() {}

  /**
   * All-args constructor.
   * @param contentFileId The new value for contentFileId
   * @param documentId The new value for documentId
   * @param envelopeId The new value for envelopeId
   * @param errorId The new value for errorId
   * @param errorInfo The new value for errorInfo
   * @param errorLevel The new value for errorLevel
   * @param offset The new value for offset
   * @param position The new value for position
   * @param processId The new value for processId
   * @param taskId The new value for taskId
   * @param transactionId The new value for transactionId
   */
  public ContentErrorEvent(java.lang.String contentFileId, java.lang.String documentId, java.lang.String envelopeId, java.lang.String errorId, com.opentext.bn.converters.avro.entity.ErrorInfo errorInfo, java.lang.String errorLevel, java.lang.Integer offset, java.lang.Integer position, java.lang.String processId, java.lang.String taskId, java.lang.String transactionId) {
    this.contentFileId = contentFileId;
    this.documentId = documentId;
    this.envelopeId = envelopeId;
    this.errorId = errorId;
    this.errorInfo = errorInfo;
    this.errorLevel = errorLevel;
    this.offset = offset;
    this.position = position;
    this.processId = processId;
    this.taskId = taskId;
    this.transactionId = transactionId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return contentFileId;
    case 1: return documentId;
    case 2: return envelopeId;
    case 3: return errorId;
    case 4: return errorInfo;
    case 5: return errorLevel;
    case 6: return offset;
    case 7: return position;
    case 8: return processId;
    case 9: return taskId;
    case 10: return transactionId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: contentFileId = (java.lang.String)value$; break;
    case 1: documentId = (java.lang.String)value$; break;
    case 2: envelopeId = (java.lang.String)value$; break;
    case 3: errorId = (java.lang.String)value$; break;
    case 4: errorInfo = (com.opentext.bn.converters.avro.entity.ErrorInfo)value$; break;
    case 5: errorLevel = (java.lang.String)value$; break;
    case 6: offset = (java.lang.Integer)value$; break;
    case 7: position = (java.lang.Integer)value$; break;
    case 8: processId = (java.lang.String)value$; break;
    case 9: taskId = (java.lang.String)value$; break;
    case 10: transactionId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'contentFileId' field.
   * @return The value of the 'contentFileId' field.
   */
  public java.lang.String getContentFileId() {
    return contentFileId;
  }


  /**
   * Gets the value of the 'documentId' field.
   * @return The value of the 'documentId' field.
   */
  public java.lang.String getDocumentId() {
    return documentId;
  }


  /**
   * Gets the value of the 'envelopeId' field.
   * @return The value of the 'envelopeId' field.
   */
  public java.lang.String getEnvelopeId() {
    return envelopeId;
  }


  /**
   * Gets the value of the 'errorId' field.
   * @return The value of the 'errorId' field.
   */
  public java.lang.String getErrorId() {
    return errorId;
  }


  /**
   * Gets the value of the 'errorInfo' field.
   * @return The value of the 'errorInfo' field.
   */
  public com.opentext.bn.converters.avro.entity.ErrorInfo getErrorInfo() {
    return errorInfo;
  }


  /**
   * Gets the value of the 'errorLevel' field.
   * @return The value of the 'errorLevel' field.
   */
  public java.lang.String getErrorLevel() {
    return errorLevel;
  }


  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Integer getOffset() {
    return offset;
  }


  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public java.lang.Integer getPosition() {
    return position;
  }


  /**
   * Gets the value of the 'processId' field.
   * @return The value of the 'processId' field.
   */
  public java.lang.String getProcessId() {
    return processId;
  }


  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public java.lang.String getTaskId() {
    return taskId;
  }


  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Creates a new ContentErrorEvent RecordBuilder.
   * @return A new ContentErrorEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder();
  }

  /**
   * Creates a new ContentErrorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContentErrorEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder other) {
    return new com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder(other);
  }

  /**
   * Creates a new ContentErrorEvent RecordBuilder by copying an existing ContentErrorEvent instance.
   * @param other The existing instance to copy.
   * @return A new ContentErrorEvent RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder newBuilder(com.opentext.bn.converters.avro.entity.ContentErrorEvent other) {
    return new com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder(other);
  }

  /**
   * RecordBuilder for ContentErrorEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContentErrorEvent>
    implements org.apache.avro.data.RecordBuilder<ContentErrorEvent> {

    private java.lang.String contentFileId;
    private java.lang.String documentId;
    private java.lang.String envelopeId;
    private java.lang.String errorId;
    private com.opentext.bn.converters.avro.entity.ErrorInfo errorInfo;
    private com.opentext.bn.converters.avro.entity.ErrorInfo.Builder errorInfoBuilder;
    private java.lang.String errorLevel;
    private int offset;
    private int position;
    private java.lang.String processId;
    private java.lang.String taskId;
    private java.lang.String transactionId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.contentFileId)) {
        this.contentFileId = data().deepCopy(fields()[0].schema(), other.contentFileId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.documentId)) {
        this.documentId = data().deepCopy(fields()[1].schema(), other.documentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.envelopeId)) {
        this.envelopeId = data().deepCopy(fields()[2].schema(), other.envelopeId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.errorId)) {
        this.errorId = data().deepCopy(fields()[3].schema(), other.errorId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.errorInfo)) {
        this.errorInfo = data().deepCopy(fields()[4].schema(), other.errorInfo);
        fieldSetFlags()[4] = true;
      }
      if (other.hasErrorInfoBuilder()) {
        this.errorInfoBuilder = com.opentext.bn.converters.avro.entity.ErrorInfo.newBuilder(other.getErrorInfoBuilder());
      }
      if (isValidValue(fields()[5], other.errorLevel)) {
        this.errorLevel = data().deepCopy(fields()[5].schema(), other.errorLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.offset)) {
        this.offset = data().deepCopy(fields()[6].schema(), other.offset);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.position)) {
        this.position = data().deepCopy(fields()[7].schema(), other.position);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.processId)) {
        this.processId = data().deepCopy(fields()[8].schema(), other.processId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.taskId)) {
        this.taskId = data().deepCopy(fields()[9].schema(), other.taskId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[10].schema(), other.transactionId);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ContentErrorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.ContentErrorEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.contentFileId)) {
        this.contentFileId = data().deepCopy(fields()[0].schema(), other.contentFileId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.documentId)) {
        this.documentId = data().deepCopy(fields()[1].schema(), other.documentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.envelopeId)) {
        this.envelopeId = data().deepCopy(fields()[2].schema(), other.envelopeId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.errorId)) {
        this.errorId = data().deepCopy(fields()[3].schema(), other.errorId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.errorInfo)) {
        this.errorInfo = data().deepCopy(fields()[4].schema(), other.errorInfo);
        fieldSetFlags()[4] = true;
      }
      this.errorInfoBuilder = null;
      if (isValidValue(fields()[5], other.errorLevel)) {
        this.errorLevel = data().deepCopy(fields()[5].schema(), other.errorLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.offset)) {
        this.offset = data().deepCopy(fields()[6].schema(), other.offset);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.position)) {
        this.position = data().deepCopy(fields()[7].schema(), other.position);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.processId)) {
        this.processId = data().deepCopy(fields()[8].schema(), other.processId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.taskId)) {
        this.taskId = data().deepCopy(fields()[9].schema(), other.taskId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[10].schema(), other.transactionId);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'contentFileId' field.
      * @return The value.
      */
    public java.lang.String getContentFileId() {
      return contentFileId;
    }

    /**
      * Sets the value of the 'contentFileId' field.
      * @param value The value of 'contentFileId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setContentFileId(java.lang.String value) {
      validate(fields()[0], value);
      this.contentFileId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'contentFileId' field has been set.
      * @return True if the 'contentFileId' field has been set, false otherwise.
      */
    public boolean hasContentFileId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'contentFileId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearContentFileId() {
      contentFileId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentId' field.
      * @return The value.
      */
    public java.lang.String getDocumentId() {
      return documentId;
    }

    /**
      * Sets the value of the 'documentId' field.
      * @param value The value of 'documentId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setDocumentId(java.lang.String value) {
      validate(fields()[1], value);
      this.documentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'documentId' field has been set.
      * @return True if the 'documentId' field has been set, false otherwise.
      */
    public boolean hasDocumentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'documentId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearDocumentId() {
      documentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'envelopeId' field.
      * @return The value.
      */
    public java.lang.String getEnvelopeId() {
      return envelopeId;
    }

    /**
      * Sets the value of the 'envelopeId' field.
      * @param value The value of 'envelopeId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setEnvelopeId(java.lang.String value) {
      validate(fields()[2], value);
      this.envelopeId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'envelopeId' field has been set.
      * @return True if the 'envelopeId' field has been set, false otherwise.
      */
    public boolean hasEnvelopeId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'envelopeId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearEnvelopeId() {
      envelopeId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorId' field.
      * @return The value.
      */
    public java.lang.String getErrorId() {
      return errorId;
    }

    /**
      * Sets the value of the 'errorId' field.
      * @param value The value of 'errorId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setErrorId(java.lang.String value) {
      validate(fields()[3], value);
      this.errorId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'errorId' field has been set.
      * @return True if the 'errorId' field has been set, false otherwise.
      */
    public boolean hasErrorId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'errorId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearErrorId() {
      errorId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorInfo' field.
      * @return The value.
      */
    public com.opentext.bn.converters.avro.entity.ErrorInfo getErrorInfo() {
      return errorInfo;
    }

    /**
      * Sets the value of the 'errorInfo' field.
      * @param value The value of 'errorInfo'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setErrorInfo(com.opentext.bn.converters.avro.entity.ErrorInfo value) {
      validate(fields()[4], value);
      this.errorInfoBuilder = null;
      this.errorInfo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'errorInfo' field has been set.
      * @return True if the 'errorInfo' field has been set, false otherwise.
      */
    public boolean hasErrorInfo() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'errorInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.ErrorInfo.Builder getErrorInfoBuilder() {
      if (errorInfoBuilder == null) {
        if (hasErrorInfo()) {
          setErrorInfoBuilder(com.opentext.bn.converters.avro.entity.ErrorInfo.newBuilder(errorInfo));
        } else {
          setErrorInfoBuilder(com.opentext.bn.converters.avro.entity.ErrorInfo.newBuilder());
        }
      }
      return errorInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'errorInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setErrorInfoBuilder(com.opentext.bn.converters.avro.entity.ErrorInfo.Builder value) {
      clearErrorInfo();
      errorInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'errorInfo' field has an active Builder instance
     * @return True if the 'errorInfo' field has an active Builder instance
     */
    public boolean hasErrorInfoBuilder() {
      return errorInfoBuilder != null;
    }

    /**
      * Clears the value of the 'errorInfo' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearErrorInfo() {
      errorInfo = null;
      errorInfoBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorLevel' field.
      * @return The value.
      */
    public java.lang.String getErrorLevel() {
      return errorLevel;
    }

    /**
      * Sets the value of the 'errorLevel' field.
      * @param value The value of 'errorLevel'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setErrorLevel(java.lang.String value) {
      validate(fields()[5], value);
      this.errorLevel = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'errorLevel' field has been set.
      * @return True if the 'errorLevel' field has been set, false otherwise.
      */
    public boolean hasErrorLevel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'errorLevel' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearErrorLevel() {
      errorLevel = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Integer getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setOffset(int value) {
      validate(fields()[6], value);
      this.offset = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearOffset() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public java.lang.Integer getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setPosition(int value) {
      validate(fields()[7], value);
      this.position = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearPosition() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'processId' field.
      * @return The value.
      */
    public java.lang.String getProcessId() {
      return processId;
    }

    /**
      * Sets the value of the 'processId' field.
      * @param value The value of 'processId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setProcessId(java.lang.String value) {
      validate(fields()[8], value);
      this.processId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'processId' field has been set.
      * @return True if the 'processId' field has been set, false otherwise.
      */
    public boolean hasProcessId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'processId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearProcessId() {
      processId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public java.lang.String getTaskId() {
      return taskId;
    }

    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setTaskId(java.lang.String value) {
      validate(fields()[9], value);
      this.taskId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearTaskId() {
      taskId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder setTransactionId(java.lang.String value) {
      validate(fields()[10], value);
      this.transactionId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentErrorEvent.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContentErrorEvent build() {
      try {
        ContentErrorEvent record = new ContentErrorEvent();
        record.contentFileId = fieldSetFlags()[0] ? this.contentFileId : (java.lang.String) defaultValue(fields()[0]);
        record.documentId = fieldSetFlags()[1] ? this.documentId : (java.lang.String) defaultValue(fields()[1]);
        record.envelopeId = fieldSetFlags()[2] ? this.envelopeId : (java.lang.String) defaultValue(fields()[2]);
        record.errorId = fieldSetFlags()[3] ? this.errorId : (java.lang.String) defaultValue(fields()[3]);
        if (errorInfoBuilder != null) {
          record.errorInfo = this.errorInfoBuilder.build();
        } else {
          record.errorInfo = fieldSetFlags()[4] ? this.errorInfo : (com.opentext.bn.converters.avro.entity.ErrorInfo) defaultValue(fields()[4]);
        }
        record.errorLevel = fieldSetFlags()[5] ? this.errorLevel : (java.lang.String) defaultValue(fields()[5]);
        record.offset = fieldSetFlags()[6] ? this.offset : (java.lang.Integer) defaultValue(fields()[6]);
        record.position = fieldSetFlags()[7] ? this.position : (java.lang.Integer) defaultValue(fields()[7]);
        record.processId = fieldSetFlags()[8] ? this.processId : (java.lang.String) defaultValue(fields()[8]);
        record.taskId = fieldSetFlags()[9] ? this.taskId : (java.lang.String) defaultValue(fields()[9]);
        record.transactionId = fieldSetFlags()[10] ? this.transactionId : (java.lang.String) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContentErrorEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContentErrorEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContentErrorEvent>
    READER$ = (org.apache.avro.io.DatumReader<ContentErrorEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
