/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PayloadRef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1153218691566231154L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PayloadRef\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"payloadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payloadType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PayloadRef> ENCODER =
      new BinaryMessageEncoder<PayloadRef>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PayloadRef> DECODER =
      new BinaryMessageDecoder<PayloadRef>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PayloadRef> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PayloadRef> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PayloadRef>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PayloadRef to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PayloadRef from a ByteBuffer. */
  public static PayloadRef fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String payloadId;
   private java.lang.String payloadType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PayloadRef() {}

  /**
   * All-args constructor.
   * @param payloadId The new value for payloadId
   * @param payloadType The new value for payloadType
   */
  public PayloadRef(java.lang.String payloadId, java.lang.String payloadType) {
    this.payloadId = payloadId;
    this.payloadType = payloadType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payloadId;
    case 1: return payloadType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payloadId = (java.lang.String)value$; break;
    case 1: payloadType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payloadId' field.
   * @return The value of the 'payloadId' field.
   */
  public java.lang.String getPayloadId() {
    return payloadId;
  }


  /**
   * Gets the value of the 'payloadType' field.
   * @return The value of the 'payloadType' field.
   */
  public java.lang.String getPayloadType() {
    return payloadType;
  }


  /**
   * Creates a new PayloadRef RecordBuilder.
   * @return A new PayloadRef RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.PayloadRef.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.PayloadRef.Builder();
  }

  /**
   * Creates a new PayloadRef RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PayloadRef RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.PayloadRef.Builder newBuilder(com.opentext.bn.converters.avro.entity.PayloadRef.Builder other) {
    return new com.opentext.bn.converters.avro.entity.PayloadRef.Builder(other);
  }

  /**
   * Creates a new PayloadRef RecordBuilder by copying an existing PayloadRef instance.
   * @param other The existing instance to copy.
   * @return A new PayloadRef RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.PayloadRef.Builder newBuilder(com.opentext.bn.converters.avro.entity.PayloadRef other) {
    return new com.opentext.bn.converters.avro.entity.PayloadRef.Builder(other);
  }

  /**
   * RecordBuilder for PayloadRef instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PayloadRef>
    implements org.apache.avro.data.RecordBuilder<PayloadRef> {

    private java.lang.String payloadId;
    private java.lang.String payloadType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.PayloadRef.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payloadId)) {
        this.payloadId = data().deepCopy(fields()[0].schema(), other.payloadId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[1].schema(), other.payloadType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PayloadRef instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.PayloadRef other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.payloadId)) {
        this.payloadId = data().deepCopy(fields()[0].schema(), other.payloadId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[1].schema(), other.payloadType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'payloadId' field.
      * @return The value.
      */
    public java.lang.String getPayloadId() {
      return payloadId;
    }

    /**
      * Sets the value of the 'payloadId' field.
      * @param value The value of 'payloadId'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder setPayloadId(java.lang.String value) {
      validate(fields()[0], value);
      this.payloadId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadId' field has been set.
      * @return True if the 'payloadId' field has been set, false otherwise.
      */
    public boolean hasPayloadId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'payloadId' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder clearPayloadId() {
      payloadId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * @return The value.
      */
    public java.lang.String getPayloadType() {
      return payloadType;
    }

    /**
      * Sets the value of the 'payloadType' field.
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder setPayloadType(java.lang.String value) {
      validate(fields()[1], value);
      this.payloadType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.PayloadRef.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PayloadRef build() {
      try {
        PayloadRef record = new PayloadRef();
        record.payloadId = fieldSetFlags()[0] ? this.payloadId : (java.lang.String) defaultValue(fields()[0]);
        record.payloadType = fieldSetFlags()[1] ? this.payloadType : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PayloadRef>
    WRITER$ = (org.apache.avro.io.DatumWriter<PayloadRef>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PayloadRef>
    READER$ = (org.apache.avro.io.DatumReader<PayloadRef>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
