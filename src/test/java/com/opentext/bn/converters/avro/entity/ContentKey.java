/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opentext.bn.converters.avro.entity;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContentKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4790516052980612455L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContentKey\",\"namespace\":\"com.opentext.bn.converters.avro.entity\",\"fields\":[{\"name\":\"keyName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"keyValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"keyType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContentKey> ENCODER =
      new BinaryMessageEncoder<ContentKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContentKey> DECODER =
      new BinaryMessageDecoder<ContentKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ContentKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ContentKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ContentKey>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ContentKey to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ContentKey from a ByteBuffer. */
  public static ContentKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String keyName;
   private java.lang.String keyValue;
   private java.lang.String keyType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContentKey() {}

  /**
   * All-args constructor.
   * @param keyName The new value for keyName
   * @param keyValue The new value for keyValue
   * @param keyType The new value for keyType
   */
  public ContentKey(java.lang.String keyName, java.lang.String keyValue, java.lang.String keyType) {
    this.keyName = keyName;
    this.keyValue = keyValue;
    this.keyType = keyType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return keyName;
    case 1: return keyValue;
    case 2: return keyType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: keyName = (java.lang.String)value$; break;
    case 1: keyValue = (java.lang.String)value$; break;
    case 2: keyType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'keyName' field.
   * @return The value of the 'keyName' field.
   */
  public java.lang.String getKeyName() {
    return keyName;
  }


  /**
   * Gets the value of the 'keyValue' field.
   * @return The value of the 'keyValue' field.
   */
  public java.lang.String getKeyValue() {
    return keyValue;
  }


  /**
   * Gets the value of the 'keyType' field.
   * @return The value of the 'keyType' field.
   */
  public java.lang.String getKeyType() {
    return keyType;
  }


  /**
   * Creates a new ContentKey RecordBuilder.
   * @return A new ContentKey RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentKey.Builder newBuilder() {
    return new com.opentext.bn.converters.avro.entity.ContentKey.Builder();
  }

  /**
   * Creates a new ContentKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContentKey RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentKey.Builder newBuilder(com.opentext.bn.converters.avro.entity.ContentKey.Builder other) {
    return new com.opentext.bn.converters.avro.entity.ContentKey.Builder(other);
  }

  /**
   * Creates a new ContentKey RecordBuilder by copying an existing ContentKey instance.
   * @param other The existing instance to copy.
   * @return A new ContentKey RecordBuilder
   */
  public static com.opentext.bn.converters.avro.entity.ContentKey.Builder newBuilder(com.opentext.bn.converters.avro.entity.ContentKey other) {
    return new com.opentext.bn.converters.avro.entity.ContentKey.Builder(other);
  }

  /**
   * RecordBuilder for ContentKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContentKey>
    implements org.apache.avro.data.RecordBuilder<ContentKey> {

    private java.lang.String keyName;
    private java.lang.String keyValue;
    private java.lang.String keyType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.ContentKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.keyName)) {
        this.keyName = data().deepCopy(fields()[0].schema(), other.keyName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keyValue)) {
        this.keyValue = data().deepCopy(fields()[1].schema(), other.keyValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.keyType)) {
        this.keyType = data().deepCopy(fields()[2].schema(), other.keyType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ContentKey instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opentext.bn.converters.avro.entity.ContentKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.keyName)) {
        this.keyName = data().deepCopy(fields()[0].schema(), other.keyName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keyValue)) {
        this.keyValue = data().deepCopy(fields()[1].schema(), other.keyValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.keyType)) {
        this.keyType = data().deepCopy(fields()[2].schema(), other.keyType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'keyName' field.
      * @return The value.
      */
    public java.lang.String getKeyName() {
      return keyName;
    }

    /**
      * Sets the value of the 'keyName' field.
      * @param value The value of 'keyName'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder setKeyName(java.lang.String value) {
      validate(fields()[0], value);
      this.keyName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'keyName' field has been set.
      * @return True if the 'keyName' field has been set, false otherwise.
      */
    public boolean hasKeyName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'keyName' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder clearKeyName() {
      keyName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyValue' field.
      * @return The value.
      */
    public java.lang.String getKeyValue() {
      return keyValue;
    }

    /**
      * Sets the value of the 'keyValue' field.
      * @param value The value of 'keyValue'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder setKeyValue(java.lang.String value) {
      validate(fields()[1], value);
      this.keyValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'keyValue' field has been set.
      * @return True if the 'keyValue' field has been set, false otherwise.
      */
    public boolean hasKeyValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'keyValue' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder clearKeyValue() {
      keyValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyType' field.
      * @return The value.
      */
    public java.lang.String getKeyType() {
      return keyType;
    }

    /**
      * Sets the value of the 'keyType' field.
      * @param value The value of 'keyType'.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder setKeyType(java.lang.String value) {
      validate(fields()[2], value);
      this.keyType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'keyType' field has been set.
      * @return True if the 'keyType' field has been set, false otherwise.
      */
    public boolean hasKeyType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'keyType' field.
      * @return This builder.
      */
    public com.opentext.bn.converters.avro.entity.ContentKey.Builder clearKeyType() {
      keyType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContentKey build() {
      try {
        ContentKey record = new ContentKey();
        record.keyName = fieldSetFlags()[0] ? this.keyName : (java.lang.String) defaultValue(fields()[0]);
        record.keyValue = fieldSetFlags()[1] ? this.keyValue : (java.lang.String) defaultValue(fields()[1]);
        record.keyType = fieldSetFlags()[2] ? this.keyType : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContentKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContentKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContentKey>
    READER$ = (org.apache.avro.io.DatumReader<ContentKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
